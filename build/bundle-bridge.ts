import * as esbuild from "esbuild";
import * as fs from "fs";
import * as path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const DEV = process.env.NODE_ENV !== "production";

async function bundleBridge() {
  const version = getVersion();

  const result = await esbuild.build({
    entryPoints: [path.join(__dirname, "../src/browser/bridge-entry.ts")],
    bundle: true,
    format: "iife",
    platform: "browser",
    target: "es2020",
    minify: !DEV,
    sourcemap: DEV ? "inline" : false,
    sourcesContent: DEV,
    banner: {
      js: [
        `// Verdex Bridge Bundle v${version}`,
        `// Generated: ${new Date().toISOString()}`,
      ].join("\n"),
    },
    define: {
      __VERSION__: JSON.stringify(version),
    },
    write: false,
  });

  const bundleCode = result.outputFiles[0].text;

  // Size guard (100 KB in production only; dev includes inline sourcemaps)
  const bytes = Buffer.byteLength(bundleCode, "utf8");
  if (!DEV && bytes > 100 * 1024) {
    console.error(
      `❌ Bridge too large: ${(bytes / 1024).toFixed(1)} KB (limit 100 KB)`
    );
    process.exit(1);
  }

  const bundleModule = `/**
 * Auto-generated bridge bundle
 * DO NOT EDIT - Generated by build/bundle-bridge.ts
 */
export const BRIDGE_BUNDLE = ${JSON.stringify(bundleCode)};
export const BRIDGE_VERSION = ${JSON.stringify(version)};
`;

  const outputPath = path.join(__dirname, "../src/runtime/bridge-bundle.ts");

  // Ensure directory exists
  const outputDir = path.dirname(outputPath);
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  fs.writeFileSync(outputPath, bundleModule);

  console.log(
    `✅ Bridge bundle generated (${(bytes / 1024).toFixed(1)} KB) v${version}${
      DEV ? " [dev]" : ""
    }`
  );
}

function getVersion(): string {
  const pkg = JSON.parse(
    fs.readFileSync(path.join(__dirname, "../package.json"), "utf8")
  );
  return pkg.version;
}

bundleBridge().catch((err) => {
  console.error(err);
  process.exit(1);
});
